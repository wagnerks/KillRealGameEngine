#pragma once
#include <map>
#include <string>
#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include "core/ScreenDrawData.h"
#include "core/Singleton.h"

namespace SFE::Render {
	enum glfwHints {												//   default					    possible values
		RESIZABLE = GLFW_RESIZABLE,									//  GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		VISIBLE = GLFW_VISIBLE,										//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		DECORATED = GLFW_DECORATED,									//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		FOCUSED = GLFW_FOCUSED,										//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		AUTO_ICONIFY = GLFW_AUTO_ICONIFY,							//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		FLOATING = GLFW_FLOATING,									//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		MAXIMIZED = GLFW_MAXIMIZED,									//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		CENTER_CURSOR = GLFW_CENTER_CURSOR,							//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		TRANSPARENT_FRAMEBUFFER = GLFW_TRANSPARENT_FRAMEBUFFER,		//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		FOCUS_ON_SHOW = GLFW_FOCUS_ON_SHOW,							//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		SCALE_TO_MONITOR = GLFW_SCALE_TO_MONITOR,					//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		RED_BITS = GLFW_RED_BITS,									//	8							0 to INT_MAX or GLFW_DONT_CARE
		GREEN_BITS = GLFW_GREEN_BITS,								//	8							0 to INT_MAX or GLFW_DONT_CARE
		BLUE_BITS = GLFW_BLUE_BITS,									//	8							0 to INT_MAX or GLFW_DONT_CARE
		ALPHA_BITS = GLFW_ALPHA_BITS,								//	8							0 to INT_MAX or GLFW_DONT_CARE
		DEPTH_BITS = GLFW_DEPTH_BITS,								//	24							0 to INT_MAX or GLFW_DONT_CARE
		STENCIL_BITS = GLFW_STENCIL_BITS,							//	8							0 to INT_MAX or GLFW_DONT_CARE
		ACCUM_RED_BITS = GLFW_ACCUM_RED_BITS,						//	0							0 to INT_MAX or GLFW_DONT_CARE
		ACCUM_GREEN_BITS = GLFW_ACCUM_GREEN_BITS,					//	0							0 to INT_MAX or GLFW_DONT_CARE
		ACCUM_BLUE_BITS = GLFW_ACCUM_BLUE_BITS,						//	0							0 to INT_MAX or GLFW_DONT_CARE
		ACCUM_ALPHA_BITS = GLFW_ACCUM_ALPHA_BITS,					//	0							0 to INT_MAX or GLFW_DONT_CARE
		AUX_BUFFERS = GLFW_AUX_BUFFERS,								//	0							0 to INT_MAX or GLFW_DONT_CARE
		SAMPLES = GLFW_SAMPLES,										//	0							0 to INT_MAX or GLFW_DONT_CARE
		REFRESH_RATE = GLFW_REFRESH_RATE,							//	GLFW_DONT_CARE				0 to INT_MAX or GLFW_DONT_CARE
		STEREO = GLFW_STEREO,										//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		SRGB_CAPABLE = GLFW_SRGB_CAPABLE,							//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		DOUBLEBUFFER = GLFW_DOUBLEBUFFER,							//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		CLIENT_API = GLFW_CLIENT_API,								//	GLFW_OPENGL_API				GLFW_OPENGL_API, GLFW_OPENGL_ES_API or GLFW_NO_API
		CONTEXT_CREATION_API = GLFW_CONTEXT_CREATION_API,			//	GLFW_NATIVE_CONTEXT_API		GLFW_NATIVE_CONTEXT_API, GLFW_EGL_CONTEXT_API or GLFW_OSMESA_CONTEXT_API
		CONTEXT_VERSION_MAJOR = GLFW_CONTEXT_VERSION_MAJOR,			//	1							Any valid major version number of the chosen client API
		CONTEXT_VERSION_MINOR = GLFW_CONTEXT_VERSION_MINOR,			//	0							Any valid minor version number of the chosen client API
		CONTEXT_ROBUSTNESS = GLFW_CONTEXT_ROBUSTNESS,				//	GLFW_NO_ROBUSTNESS			GLFW_NO_ROBUSTNESS, GLFW_NO_RESET_NOTIFICATION or GLFW_LOSE_CONTEXT_ON_RESET
		CONTEXT_RELEASE_BEHAVIOR = GLFW_CONTEXT_RELEASE_BEHAVIOR,	//	GLFW_ANY_RELEASE_BEHAVIOR	GLFW_ANY_RELEASE_BEHAVIOR, GLFW_RELEASE_BEHAVIOR_FLUSH or GLFW_RELEASE_BEHAVIOR_NONE
		OPENGL_FORWARD_COMPAT = GLFW_OPENGL_FORWARD_COMPAT,			//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		OPENGL_DEBUG_CONTEXT = GLFW_OPENGL_DEBUG_CONTEXT,			//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		OPENGL_PROFILE = GLFW_OPENGL_PROFILE,						//	GLFW_OPENGL_ANY_PROFILE		GLFW_OPENGL_ANY_PROFILE, GLFW_OPENGL_COMPAT_PROFILE or GLFW_OPENGL_CORE_PROFILE
		COCOA_RETINA_FRAMEBUFFER = GLFW_COCOA_RETINA_FRAMEBUFFER,	//	GLFW_TRUE					GLFW_TRUE or GLFW_FALSE
		COCOA_FRAME_NAME = GLFW_COCOA_FRAME_NAME,					//	""							A UTF - 8 encoded frame autosave name
		COCOA_GRAPHICS_SWITCHING = GLFW_COCOA_GRAPHICS_SWITCHING,	//	GLFW_FALSE					GLFW_TRUE or GLFW_FALSE
		X11_CLASS_NAME = GLFW_X11_CLASS_NAME,						//	""							An ASCII encoded WM_CLASS class name
		X11_INSTANCE_NAME = GLFW_X11_INSTANCE_NAME,					//	""							An ASCII encoded WM_CLASS instance name
	};

	class Window {
	public:
		static void init();

		static Window createWindow(int w, int h, const std::string& title, GLFWwindow* share);
		GLFWwindow* getWindow() { return mWindow; }
	private:
		inline static bool mGLFWInited = false;
		CoreModule::ScreenDrawData data;
		GLFWwindow* mWindow = nullptr;
	};

	class Renderer : public Singleton<Renderer> {
	public:
		~Renderer() override;

		void swapBuffer();
		inline static CoreModule::ScreenDrawData screenDrawData;

	public:
		static GLFWwindow* initGLFW();
	private:
		inline static bool mGLFWInited = false;
	};
}

